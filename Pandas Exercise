Part 1
Dataframes and series

Introduction
The first step in most data analytics projects is reading the data file. In this exercise, you'll create Series and DataFrame objects, both by hand and by reading data files.

Run the code cell below to load libraries you will need (including code to check your answers).


arrow_upward

arrow_downward

delete

unfold_less

more_vert
import pandas as pd
pd.set_option('max_rows', 5)
from learntools.core import binder; binder.bind(globals())
from learntools.pandas.creating_reading_and_writing import *
print("Setup complete.")
Setup complete.

arrow_upward

arrow_downward

delete

unfold_less

more_vert
Exercises

arrow_upward

arrow_downward

delete

unfold_less

more_vert
1.
In the cell below, create a DataFrame fruits that looks like this:




arrow_upward

arrow_downward

delete

unfold_less

more_vert
DataFrame
# Your code goes here. Create a dataframe matching the above diagram and assign it to the variable fruits.
fruits = pd.DataFrame({'Apples': [30], 'Bananas' : [21]})

# Check your answer
q1.check()
fruits
Correct

Apples	Bananas
0	30	21

arrow_upward

arrow_downward

delete

unfold_less

more_vert
#
#q1.hint()
#q1.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
2.
Create a dataframe fruit_sales that matches the diagram below:




arrow_upward

arrow_downward

delete

unfold_less

more_vert
 Sales'
# Your code goes here. Create a dataframe matching the above diagram and assign it to the variable fruit_sales.
fruit_sales = pd.DataFrame({'Apples':[35,41],'Bananas':[21,34]},index=['2017 Sales','2018 Sales'])

# Check your answer
q2.check()
fruit_sales
Correct

Apples	Bananas
2017 Sales	35	21
2018 Sales	41	34

arrow_upward

arrow_downward

delete

unfold_less

more_vert
#q2.hint()
#q2.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
3.
Create a variable ingredients with a Series that looks like:

Flour     4 cups
Milk       1 cup
Eggs     2 large
Spam       1 can
Name: Dinner, dtype: object

arrow_upward

arrow_downward

delete

unfold_less

more_vert
Dinner
ingredients = pd.Series(['4 cups','1 cup','2 large','1 can'],index=['Flour','Milk','Eggs','Spam'],name='Dinner')

# Check your answer
q3.check()
ingredients
Correct

Flour     4 cups
Milk       1 cup
Eggs     2 large
Spam       1 can
Name: Dinner, dtype: object

arrow_upward

arrow_downward

delete

unfold_less

more_vert
#q3.hint()
#q3.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
4.
Read the following csv dataset of wine reviews into a DataFrame called reviews:



The filepath to the csv file is ../input/wine-reviews/winemag-data_first150k.csv. The first few lines look like:

,country,description,designation,points,price,province,region_1,region_2,variety,winery
0,US,"This tremendous 100% varietal wine[...]",Martha's Vineyard,96,235.0,California,Napa Valley,Napa,Cabernet Sauvignon,Heitz
1,Spain,"Ripe aromas of fig, blackberry and[...]",Carodorum Selección Especial Reserva,96,110.0,Northern Spain,Toro,,Tinta de Toro,Bodega Carmen Rodríguez

arrow_upward

arrow_downward

delete

unfold_less

more_vert
col=0
reviews = pd.read_csv('../input/wine-reviews/winemag-data_first150k.csv',index_col=0)

# Check your answer
q4.check()
reviews
Correct

country	description	designation	points	price	province	region_1	region_2	variety	winery
0	US	This tremendous 100% varietal wine hails from ...	Martha's Vineyard	96	235.0	California	Napa Valley	Napa	Cabernet Sauvignon	Heitz
1	Spain	Ripe aromas of fig, blackberry and cassis are ...	Carodorum Selección Especial Reserva	96	110.0	Northern Spain	Toro	NaN	Tinta de Toro	Bodega Carmen Rodríguez
...	...	...	...	...	...	...	...	...	...	...
150928	France	A perfect salmon shade, with scents of peaches...	Grand Brut Rosé	90	52.0	Champagne	Champagne	NaN	Champagne Blend	Gosset
150929	Italy	More Pinot Grigios should taste like this. A r...	NaN	90	15.0	Northeastern Italy	Alto Adige	NaN	Pinot Grigio	Alois Lageder
150930 rows × 10 columns


arrow_upward

arrow_downward

delete

unfold_less

more_vert
q4.hint()
#q4.solution()
Hint: Note that the csv file begins with an unnamed column of increasing integers. We want this to be used as the index. Check out the description of the index_col keyword argument in the docs for read_csv.


arrow_upward

arrow_downward

delete

unfold_less

more_vert
5.
Run the cell below to create and display a DataFrame called animals:


arrow_upward

arrow_downward

delete

unfold_less

more_vert
animals = pd.DataFrame({'Cows': [12, 20], 'Goats': [22, 19]}, index=['Year 1', 'Year 2'])
animals
Cows	Goats
Year 1	12	22
Year 2	20	19

arrow_upward

arrow_downward

delete

unfold_less

more_vert
In the cell below, write code to save this DataFrame to disk as a csv file with the name cows_and_goats.csv.


arrow_upward

arrow_downward

delete

unfold_less

more_vert
cows_and_goats.csv
# Your code goes here
animals.to_csv("cows_and_goats.csv")
# Check your answer
q5.check()
Correct


Part 2
Indexing selecting and assigning

Introduction
In this set of exercises we will work with the Wine Reviews dataset.


arrow_upward

arrow_downward

delete

unfold_less

more_vert
Run the following cell to load your data and some utility functions (including code to check your answers).


arrow_upward

arrow_downward

delete

unfold_less

more_vert
import pandas as pd

reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)
pd.set_option("display.max_rows", 5)

from learntools.core import binder; binder.bind(globals())
from learntools.pandas.indexing_selecting_and_assigning import *
print("Setup complete.")
Setup complete.

arrow_upward

arrow_downward

delete

unfold_less

more_vert
Look at an overview of your data by running the following line.


arrow_upward

arrow_downward

delete

unfold_less

more_vert
reviews.head()
country	description	designation	points	price	province	region_1	region_2	taster_name	taster_twitter_handle	title	variety	winery
0	Italy	Aromas include tropical fruit, broom, brimston...	Vulkà Bianco	87	NaN	Sicily & Sardinia	Etna	NaN	Kerin O’Keefe	@kerinokeefe	Nicosia 2013 Vulkà Bianco (Etna)	White Blend	Nicosia
1	Portugal	This is ripe and fruity, a wine that is smooth...	Avidagos	87	15.0	Douro	NaN	NaN	Roger Voss	@vossroger	Quinta dos Avidagos 2011 Avidagos Red (Douro)	Portuguese Red	Quinta dos Avidagos
2	US	Tart and snappy, the flavors of lime flesh and...	NaN	87	14.0	Oregon	Willamette Valley	Willamette Valley	Paul Gregutt	@paulgwine	Rainstorm 2013 Pinot Gris (Willamette Valley)	Pinot Gris	Rainstorm
3	US	Pineapple rind, lemon pith and orange blossom ...	Reserve Late Harvest	87	13.0	Michigan	Lake Michigan Shore	NaN	Alexander Peartree	NaN	St. Julian 2013 Reserve Late Harvest Riesling ...	Riesling	St. Julian
4	US	Much like the regular bottling from 2012, this...	Vintner's Reserve Wild Child Block	87	65.0	Oregon	Willamette Valley	Willamette Valley	Paul Gregutt	@paulgwine	Sweet Cheeks 2012 Vintner's Reserve Wild Child...	Pinot Noir	Sweet Cheeks

arrow_upward

arrow_downward

delete

unfold_less

more_vert
Exercises

arrow_upward

arrow_downward

delete

unfold_less

more_vert
1.
Select the description column from reviews and assign the result to the variable desc.


arrow_upward

arrow_downward

delete

unfold_less

more_vert
reviews.description
# Your code here
desc = reviews.description

# Check your answer
q1.check()
Correct


arrow_upward

arrow_downward

delete

unfold_less

more_vert
Follow-up question: what type of object is desc? If you're not sure, you can check by calling Python's type function: type(desc).


arrow_upward

arrow_downward

delete

unfold_less

more_vert
#q1.hint()
#q1.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
2.
Select the first value from the description column of reviews, assigning it to variable first_description.


arrow_upward

arrow_downward

delete

unfold_less

more_vert
.iloc
first_description = reviews.description.iloc[0]

# Check your answer
q2.check()
first_description
Correct:

first_description = reviews.description.iloc[0]
Note that while this is the preferred way to obtain the entry in the DataFrame, many other options will return a valid result, such as reviews.description.loc[0], reviews.description[0], and more!

"Aromas include tropical fruit, broom, brimstone and dried herb. The palate isn't overly expressive, offering unripened apple, citrus and dried sage alongside brisk acidity."

arrow_upward

arrow_downward

delete

unfold_less

more_vert
#q2.hint()
#q2.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
3.
Select the first row of data (the first record) from reviews, assigning it to the variable first_row.


arrow_upward

arrow_downward

delete

unfold_less

more_vert
0
first_row = reviews.iloc[0]

# Check your answer
q3.check()
first_row
Correct

country                                                    Italy
description    Aromas include tropical fruit, broom, brimston...
                                     ...                        
variety                                              White Blend
winery                                                   Nicosia
Name: 0, Length: 13, dtype: object

arrow_upward

arrow_downward

delete

unfold_less

more_vert
#q3.hint()
#q3.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
4.
Select the first 10 values from the description column in reviews, assigning the result to variable first_descriptions.

Hint: format your output as a pandas Series.


arrow_upward

arrow_downward

delete

unfold_less

more_vert
:
first_descriptions = reviews.description.iloc[0:10]

# Check your answer
q4.check()
first_descriptions
Correct:

first_descriptions = reviews.description.iloc[:10]
Note that many other options will return a valid result, such as desc.head(10) and reviews.loc[:9, "description"].

0    Aromas include tropical fruit, broom, brimston...
1    This is ripe and fruity, a wine that is smooth...
                           ...                        
8    Savory dried thyme notes accent sunnier flavor...
9    This has great depth of flavor with its fresh ...
Name: description, Length: 10, dtype: object

arrow_upward

arrow_downward

delete

unfold_less

more_vert
#q4.hint()
#q4.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
5.
Select the records with index labels 1, 2, 3, 5, and 8, assigning the result to the variable sample_reviews.

In other words, generate the following DataFrame:




arrow_upward

arrow_downward

delete

unfold_less

more_vert
]
indices=[1,2,3,5,8]
sample_reviews = reviews.loc[indices]
                            
# Check your answer
q5.check()
sample_reviews
Correct

country	description	designation	points	price	province	region_1	region_2	taster_name	taster_twitter_handle	title	variety	winery
1	Portugal	This is ripe and fruity, a wine that is smooth...	Avidagos	87	15.0	Douro	NaN	NaN	Roger Voss	@vossroger	Quinta dos Avidagos 2011 Avidagos Red (Douro)	Portuguese Red	Quinta dos Avidagos
2	US	Tart and snappy, the flavors of lime flesh and...	NaN	87	14.0	Oregon	Willamette Valley	Willamette Valley	Paul Gregutt	@paulgwine	Rainstorm 2013 Pinot Gris (Willamette Valley)	Pinot Gris	Rainstorm
3	US	Pineapple rind, lemon pith and orange blossom ...	Reserve Late Harvest	87	13.0	Michigan	Lake Michigan Shore	NaN	Alexander Peartree	NaN	St. Julian 2013 Reserve Late Harvest Riesling ...	Riesling	St. Julian
5	Spain	Blackberry and raspberry aromas show a typical...	Ars In Vitro	87	15.0	Northern Spain	Navarra	NaN	Michael Schachner	@wineschach	Tandem 2011 Ars In Vitro Tempranillo-Merlot (N...	Tempranillo-Merlot	Tandem
8	Germany	Savory dried thyme notes accent sunnier flavor...	Shine	87	12.0	Rheinhessen	NaN	NaN	Anna Lee C. Iijima	NaN	Heinz Eifel 2013 Shine Gewürztraminer (Rheinhe...	Gewürztraminer	Heinz Eifel

arrow_upward

arrow_downward

delete

unfold_less

more_vert
#
#q5.hint()
#q5.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
6.
Create a variable df containing the country, province, region_1, and region_2 columns of the records with the index labels 0, 1, 10, and 100. In other words, generate the following DataFrame:




arrow_upward

arrow_downward

delete

unfold_less

more_vert
)
index=([0,1,10,100],['country','province','region_1','region_2'])
df = reviews.loc[index]

# Check your answer
q6.check()
df
Correct

country	province	region_1	region_2
0	Italy	Sicily & Sardinia	Etna	NaN
1	Portugal	Douro	NaN	NaN
10	US	California	Napa Valley	Napa
100	US	New York	Finger Lakes	Finger Lakes

arrow_upward

arrow_downward

delete

unfold_less

more_vert
q6.hint()
#q6.solution()
Hint: Use the loc operator. (Note that it is also possible to solve this problem using the iloc operator, but this would require extra effort to convert each column name to a corresponding integer-valued index.)


arrow_upward

arrow_downward

delete

unfold_less

more_vert
7.
Create a variable df containing the country and variety columns of the first 100 records.

Hint: you may use loc or iloc. When working on the answer this question and the several of the ones that follow, keep the following "gotcha" described in the tutorial:

iloc uses the Python stdlib indexing scheme, where the first element of the range is included and the last one excluded. loc, meanwhile, indexes inclusively.

This is particularly confusing when the DataFrame index is a simple numerical list, e.g. 0,...,1000. In this case df.iloc[0:1000] will return 1000 entries, while df.loc[0:1000] return 1001 of them! To get 1000 elements using loc, you will need to go one lower and ask for df.iloc[0:999].


arrow_upward

arrow_downward

delete

unfold_less

more_vert
:99,cols
cols=['country','variety']
df = reviews.loc[:99,cols]

# Check your answer
q7.check()
df
Correct:

cols = ['country', 'variety']
df = reviews.loc[:99, cols]
or

cols_idx = [0, 11]
df = reviews.iloc[:100, cols_idx]
country	variety
0	Italy	White Blend
1	Portugal	Portuguese Red
...	...	...
98	Italy	Sangiovese
99	US	Bordeaux-style Red Blend
100 rows × 2 columns


arrow_upward

arrow_downward

delete

unfold_less

more_vert
#
#q7.hint()
#q7.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
8.
Create a DataFrame italian_wines containing reviews of wines made in Italy. Hint: reviews.country equals what?


arrow_upward

arrow_downward

delete

unfold_less

more_vert
Italy
italian_wines = reviews.loc[reviews.country=='Italy']

# Check your answer
q8.check()
Correct


arrow_upward

arrow_downward

delete

unfold_less

more_vert
#q8.hint()
#q8.solution()

arrow_upward

arrow_downward

delete

unfold_less

more_vert
9.
Create a DataFrame top_oceania_wines containing all reviews with at least 95 points (out of 100) for wines from Australia or New Zealand.


arrow_upward

arrow_downward

delete

unfold_less

more_vert
s
top_oceania_wines = reviews.loc[(reviews.country.isin(['Australia' , 'New Zealand'])) & (reviews.points >= 95) ]

# Check your answer
q9.check()
top_oceania_wines
Correct

country	description	designation	points	price	province	region_1	region_2	taster_name	taster_twitter_handle	title	variety	winery
345	Australia	This wine contains some material over 100 year...	Rare	100	350.0	Victoria	Rutherglen	NaN	Joe Czerwinski	@JoeCz	Chambers Rosewood Vineyards NV Rare Muscat (Ru...	Muscat	Chambers Rosewood Vineyards
346	Australia	This deep brown wine smells like a damp, mossy...	Rare	98	350.0	Victoria	Rutherglen	NaN	Joe Czerwinski	@JoeCz	Chambers Rosewood Vineyards NV Rare Muscadelle...	Muscadelle	Chambers Rosewood Vineyards
...	...	...	...	...	...	...	...	...	...	...	...	...	...
122507	New Zealand	This blend of Cabernet Sauvignon (62.5%), Merl...	SQM Gimblett Gravels Cabernets/Merlot	95	79.0	Hawke's Bay	NaN	NaN	Joe Czerwinski	@JoeCz	Squawking Magpie 2014 SQM Gimblett Gravels Cab...	Bordeaux-style Red Blend	Squawking Magpie
122939	Australia	Full-bodied and plush yet vibrant and imbued w...	The Factor	98	125.0	South Australia	Barossa Valley	NaN	Joe Czerwinski	@JoeCz	Torbreck 2013 The Factor Shiraz (Barossa Valley)	Shiraz	Torbreck
49 rows × 13 columns


arrow_upward

arrow_downward

delete

unfold_less

more_vert
#q9.hint()
#q9.solution()



Part 3
Summary functions and maps


Introduction
Now you are ready to get a deeper understanding of your data.

Run the following cell to load your data and some utility functions (including code to check your answers).






import pandas as pd
pd.set_option("display.max_rows", 5)
reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)

from learntools.core import binder; binder.bind(globals())
from learntools.pandas.summary_functions_and_maps import *
print("Setup complete.")

reviews.head()
Setup complete.
country	description	designation	points	price	province	region_1	region_2	taster_name	taster_twitter_handle	title	variety	winery
0	Italy	Aromas include tropical fruit, broom, brimston...	Vulkà Bianco	87	NaN	Sicily & Sardinia	Etna	NaN	Kerin O’Keefe	@kerinokeefe	Nicosia 2013 Vulkà Bianco (Etna)	White Blend	Nicosia
1	Portugal	This is ripe and fruity, a wine that is smooth...	Avidagos	87	15.0	Douro	NaN	NaN	Roger Voss	@vossroger	Quinta dos Avidagos 2011 Avidagos Red (Douro)	Portuguese Red	Quinta dos Avidagos
2	US	Tart and snappy, the flavors of lime flesh and...	NaN	87	14.0	Oregon	Willamette Valley	Willamette Valley	Paul Gregutt	@paulgwine	Rainstorm 2013 Pinot Gris (Willamette Valley)	Pinot Gris	Rainstorm
3	US	Pineapple rind, lemon pith and orange blossom ...	Reserve Late Harvest	87	13.0	Michigan	Lake Michigan Shore	NaN	Alexander Peartree	NaN	St. Julian 2013 Reserve Late Harvest Riesling ...	Riesling	St. Julian
4	US	Much like the regular bottling from 2012, this...	Vintner's Reserve Wild Child Block	87	65.0	Oregon	Willamette Valley	Willamette Valley	Paul Gregutt	@paulgwine	Sweet Cheeks 2012 Vintner's Reserve Wild Child...	Pinot Noir	Sweet Cheeks





Exercises





1.
What is the median of the points column in the reviews DataFrame?






median_points = reviews.points.median()

# Check your answer
q1.check()
Correct






#q1.hint()
#q1.solution()





2.
What countries are represented in the dataset? (Your answer should not include any duplicates.)






countries = reviews.country.unique()

# Check your answer
q2.check()
Correct






#q2.hint()
#q2.solution()





3.
How often does each country appear in the dataset? Create a Series reviews_per_country mapping countries to the count of reviews of wines from that country.






s
reviews_per_country = reviews.country.value_counts()

# Check your answer
q3.check()
Correct






 before applying various machine learning algorithms.)






centered_price = reviews.price-reviews.price.mean()

# Check your answer
q4.check()
Correct






#
#q4.hint()
#q4.solution()





5.
I'm an economical wine buyer. Which wine is the "best bargain"? Create a variable bargain_wine with the title of the wine with the highest points-to-price ratio in the dataset.






bargain_wine = reviews.points - reviews.price
bargain_wine
bargain_idx = (reviews.points / reviews.price).idxmax()
bargain_wine = reviews.loc[bargain_idx, 'title']

# Check your answer
q5.check()
Correct






#
#q5.hint()
#q5.solution()





6.
There are only so many words you can use when describing a bottle of wine. Is a wine more likely to be "tropical" or "fruity"? Create a Series descriptor_counts counting how many times each of these two words appears in the description column in the dataset.






descriptor_counts = ____

# Check your answer
q6.check()





#q6.hint()
#q6.solution()





7.
We'd like to host these wine reviews on our website, but a rating system ranging from 80 to 100 points is too hard to understand - we'd like to translate them into simple star ratings. A score of 95 or higher counts as 3 stars, a score of at least 85 but less than 95 is 2 stars. Any other score is 1 star.

Also, the Canadian Vintners Association bought a lot of ads on the site, so any wines from Canada should automatically get 3 stars, regardless of points.
#q3.hint() before applying various machine learning algorithms.)

centered_price = reviews.price-reviews.price.mean()
•
•
# Check your answer
q4.check()
Correct

#
#q4.hint()
#q4.solution()

5.
I'm an economical wine buyer. Which wine is the "best bargain"? Create a variable bargain_wine with the title of the wine with the highest points-to-price ratio in the dataset.

bargain_wine = reviews.points - reviews.price
bargain_wine
bargain_idx = (reviews.points / reviews.price).idxmax()
bargain_wine = reviews.loc[bargain_idx, 'title']

# Check your answer
q5.check()
Correct

#
#q5.hint()
#q5.solution()

6.
There are only so many words you can use when describing a bottle of wine. Is a wine more likely to be "tropical" or "fruity"? Create a Series descriptor_counts counting how many times each of these two words appears in the description column in the dataset.

descriptor_counts = ____

# Check your answer
q6.check()

#q6.hint()
#q6.solution()

7.
We'd like to host these wine reviews on our website, but a rating system ranging from 80 to 100 points is too hard to understand - we'd like to translate them into simple star ratings. A score of 95 or higher counts as 3 stars, a score of at least 85 but less than 95 is 2 stars. Any other score is 1 star.

Also, the Canadian Vintners Association bought a lot of ads on the site, so any wines from Canada should automatically get 3 stars, regardless of points.
#q3.solution()





4.
Create variable centered_price containing a version of the price column with the mean price subtracted.

(Note: this 'centering' transformation is a common preprocessing step before applying various machine learning algorithms.)






centered_price = reviews.price-reviews.price.mean()

# Check your answer
q4.check()
Correct






#
#q4.hint()
#q4.solution()





5.
I'm an economical wine buyer. Which wine is the "best bargain"? Create a variable bargain_wine with the title of the wine with the highest points-to-price ratio in the dataset.






bargain_wine = reviews.points - reviews.price
bargain_wine
bargain_idx = (reviews.points / reviews.price).idxmax()
bargain_wine = reviews.loc[bargain_idx, 'title']

# Check your answer
q5.check()
Correct






#
#q5.hint()
#q5.solution()





6.
There are only so many words you can use when describing a bottle of wine. Is a wine more likely to be "tropical" or "fruity"? Create a Series descriptor_counts counting how many times each of these two words appears in the description column in the dataset.






descriptor_counts = reviews.description['fruity'].value_counts()

n_trop = reviews.description.map(lambda desc: "tropical" in desc).sum()
n_fruity = reviews.description.map(lambda desc: "fruity" in desc).sum()
descriptor_counts = pd.Series([n_trop, n_fruity], index=['tropical', 'fruity'])
# Check your answer
q6.check()
Correct






#q6.hint()
q6.solution()
Solution:

n_trop = reviews.description.map(lambda desc: "tropical" in desc).sum()
n_fruity = reviews.description.map(lambda desc: "fruity" in desc).sum()
descriptor_counts = pd.Series([n_trop, n_fruity], index=['tropical', 'fruity'])





7.
We'd like to host these wine reviews on our website, but a rating system ranging from 80 to 100 points is too hard to understand - we'd like to translate them into simple star ratings. A score of 95 or higher counts as 3 stars, a score of at least 85 but less than 95 is 2 stars. Any other score is 1 star.

Also, the Canadian Vintners Association bought a lot of ads on the site, so any wines from Canada should automatically get 3 stars, regardless of points.

Create a series star_ratings with the number of stars corresponding to each review in the dataset.






def stars(row):
    if row.country == 'Canada':
        return 3
    elif row.points >= 95:
        return 3
    elif row.points >= 85:
        return 2
    else:
        return 1
star_ratings = reviews.apply(stars, axis='columns')

# Check your answer

q7.check()


Part 4

Introduction
In these exercises we'll apply groupwise analysis to our dataset.

Run the code cell below to load the data before running the exercises.






import pandas as pd
​
reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)
#pd.set_option("display.max_rows", 5)
​
from learntools.core import binder; binder.bind(globals())
from learntools.pandas.grouping_and_sorting import *
print("Setup complete.")
Setup complete.





Exercises





1.
Who are the most common wine reviewers in the dataset? Create a Series whose index is the taster_twitter_handle category from the dataset, and whose values count how many reviews each person wrote.






# Your code here
reviews_written = reviews.groupby('taster_twitter_handle').taster_twitter_handle.count()
​
# Check your answer
q1.check()
Correct:

reviews_written = reviews.groupby('taster_twitter_handle').size()
or

reviews_written = reviews.groupby('taster_twitter_handle').taster_twitter_handle.count()





#
#q1.hint()
#q1.solution()
